<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Post Listing</title>
    <link>http://sangche.github.io/posts/</link>
    <description>Recent content in Posts on Post Listing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>sangche.hwang@gmail.com (Sangche Hwang)</managingEditor>
    <webMaster>sangche.hwang@gmail.com (Sangche Hwang)</webMaster>
    <copyright>(c) 2017 - 2018</copyright>
    <lastBuildDate>Thu, 15 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://sangche.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Distributed chat app with Play Framework and Akka Distributed Data</title>
      <link>http://sangche.github.io/posts/18-03-15-distributed-chat/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      <author>sangche.hwang@gmail.com (Sangche Hwang)</author>
      <guid>http://sangche.github.io/posts/18-03-15-distributed-chat/</guid>
      <description>hljs.initHighlightingOnLoad();
Developing scalable, distributed application on top of a cluster of cheap commodity computers is popular these days. Open source Akka Toolkit provides attractive tools for developing scalable, distributed application on top of a cluster of computers.
Akka Distributed Data is useful when you need to share data between nodes in an Akka Cluster. According to Akka Distributed Data Documentation, data is accessed with an actor providing a key-value store like API.</description>
    </item>
    
    <item>
      <title>Implementing Countdown problem with Scala</title>
      <link>http://sangche.github.io/posts/18-02-20-countdown/</link>
      <pubDate>Tue, 20 Feb 2018 14:17:14 +0900</pubDate>
      <author>sangche.hwang@gmail.com (Sangche Hwang)</author>
      <guid>http://sangche.github.io/posts/18-02-20-countdown/</guid>
      <description>hljs.initHighlightingOnLoad();
Scala progamming language was built on top of Java to extend functional programming features. So, Scala is hybrid language of both object oriented and functioanl features. It means that Scala has object oriented, functional, strictly evaluating, lazily evaluating, mutable, immutable, and more features. What to use among them actually depends on how scala users utilize the language. Imperative, functional, or mixed style. So Scala language looks a bit complicated for starters, because of its overhelming features.</description>
    </item>
    
    <item>
      <title>Functional Programming in Scala Capstone Project</title>
      <link>http://sangche.github.io/posts/17-04-20-capstone/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      <author>sangche.hwang@gmail.com (Sangche Hwang)</author>
      <guid>http://sangche.github.io/posts/17-04-20-capstone/</guid>
      <description>hljs.initHighlightingOnLoad();
This scala capstone project is the last course of the Functional Programming in Scala Specialization Series from Coursera. This writing is about my implementation solution of the project, with a little bit of mathmatical model and performance measurements of the project. This project is composed of 6 milestones to implement a complete application which processes a lot of weather data, and then shows interactive visualization of the weather distribution around the world and its evolution over time on the web, like image below.</description>
    </item>
    
  </channel>
</rss>